/* ---------------------------STYLING FOR NON-HEXAGON COMPONENTS----------------------------- */

/* Here the background is put into the page */

body {
    background-size: cover;
    background-position: center;
    background-image: url("./hex_background.png");
  }

/** Text component **/
/* Here the basic formatting for the links is done, removing the underline */
/* Later the construction of the hexagons they sit inside of will be shown */

a {
    font-size: 4em;
    text-decoration: none;
    font-family: 'monaco', 'arial';
    color: darkblue;
}

/** Text component **/
/* Stylisation for the headaing of the page */ 

.site-header {
    position: fixed;
    width: 100vw; /* Designed to take up the whole width using width: 100vw */
    top: 0;
    left: 0;
    z-index: 2;
    opacity: 80%;   /* Also made to be slightly transparent to blend in better */
    background-color: black;
    font-family: 'monaco', 'arial';
    text-align: center;
}

/* Further formatting for the heading */

h1 {
    color: yellowgreen;
    font-weight: bold;
    font-size: 3em;  
}

/** Graphic component **/
/* This site footer acts as container for the links to the professional accounts */

.site-footer {
    background-color: rgb(64, 64, 64);
    position: absolute; /* Made absolute due to how hexagons are positioned */
    width: 100vw;
    top: 175vw;
    left: 0;
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
}    

.icon {
    width: 4rem;
    height: 4rem;
    padding: 1rem;
}

.icon:hover {
    width: 5rem;
    height: 5rem;
}

/* -------------------------------HEXAGON STYLING--------------------------------- */

/** Graphic component **/
/* The first part is to make a rectangle, to form the basis of the hexagon */

.hexagon {
    width: 26em;
    height: 15em;
    background-color: lightgray;
    position: absolute;
    text-align: center;
    font-size: 4em;
}

/* Then, before and after pseudoclasses are used to create triangles,
these will appear above and below the rectangle  */

.hexagon:before, .hexagon:after {
    position: absolute;
    left: 0;
    width: 0;
    content: " ";
    border-left: 13em solid transparent; /* represents left half of triangle */ 
    border-right: 13em solid transparent; /* represents right half of triangle */
}
.hexagon:before { /* triangle that sits on top of rectangle */
    bottom: 100%;
    border-bottom: 7.5em solid lightgray;
}
.hexagon:after { /* triangle that sits below */
    top: 100%;
    width: 0;
    border-top: 7.5em solid lightgray;
}

/* A simple colour change animation is implented when hovering over a link */
a:hover {
    animation: colour_changer 1.6s ease-in-out infinite;
}

/* keyframes are used to have the colour alternate, 
this will sync with the rotating hexagon borders */

@keyframes colour_changer {
    0% {
        color: darkblue;
    }
    50% {
        color: rgb(0, 255, 255);
    }
    100% {
        color: darkblue;
    }
}

/* -------------------------------HEXAGON POSITIONING--------------------------------- */

:root {
    /* 'high', 'low', etc. will refer to positions used for hexagon placement */ 
    --high: -25em;
    --low: 25em;
    --super_left: -65em;
    --super_right: 65em;
    --close_left: -15em;
    --close_right: 15em;

}

/* Here the centre of the hexagons is defined as a single point,
this is done instead of using tools like flexbox/CSS grid,
this is because it is easier to control exact positioning of hexagons */

.hex_centre {
    font-size: 0.24vw;
    top: calc(100vw + 50em); 
    left: calc(50vw - 50em); /* calculation done to fully center hexagons */
    position: absolute; 
}

/* Here hexagon positions are defined using high/low,
this allows them to be positioned in 2x2 grid in tablet mode */

#hex1 {
    top: var(--high);
    left: var(--high);
}
#hex2 {
    top: var(--high);
    left: var(--low);
}
#hex3 {
    top: var(--low);
    left: var(--high);
}
#hex4 {
    top: var(--low);
    left: var(--low);
}

/* hex_main and hex_image are for profile image in hexagon position,
properties are defined here to sit above other hexagons */

#hex_main {
    top: -75em;
    left: 0em;
    transform: scale(2);
}
#hex_image{
    width: 90%;
    height: auto;
    position: relative;
    top: -62%;
    z-index: 2;
}

/* Central hexagon size and position adjusted for desktop */

@media (min-width: 1000px) {
    .hex_centre {
        font-size: 0.12vw;
        top: calc(50vw + 50em);
    }

    /* 3rd and 4th hexagon are also repositioned to both be high,
    that way the 4 hexagon links form a single row */

    #hex3 {
        top: var(--high);
        left: var(--super_left);
    }
    #hex4 {
        top: var(--high);
        left: var(--super_right);
    }

    /* Site footer positioned much higher, due to no 2nd row of hexagons */

    .site-footer {
        top: 60vw;
    }
}

/* For mobile, all hexagons repositioned to fit into honeycomb structure */

@media (max-width: 600px) {
    #hex1 {
        top: var(--high);
        left: var(--close_left);
    }
    #hex2 {
        top: var(--high);
        left: var(--close_right);
    }
    #hex3 {
        top: var(--low);
        left: var(--close_left);
    }
    #hex4 {
        top: var(--low);
        left: var(--close_right);
    }

    /* Central profile hexagon adjusted to be between all other hexagons */
    .hex_centre { 
        font-size: 0.36vw;
        top: calc(50vw + 50em);
    }
    #hex_main {
        top: 0em;
        left: 0em;
        transform: scale(1.2);
    }

    .site-footer {
        top: 150vw;
    }
}

/* -------------------------------RECTANGLE STYLING--------------------------------- */


/** Graphic component **/
/* Rectangles act as borders for hexagons, but have special animations and shapes,
thus conventional border techniques can't be used */
.rectangle {
    position: absolute;
    width: 2em;
    height: 17em;
    background-color: gray;
    z-index: 1;
}

/* Here, structure of rectangle is defined,
to be reused depending on the position/rotation of rectangle required */
@mixin rec-style($top,$left,$rotate) {
    top: $top;
    left: $left;
    transform: rotate($rotate);
}

/* 6 rectangles for 6 sides of hexagon, numbers worked out beforehand */
$rec1: -1em,-2em,360deg;
$rec2: 11em,5em,300deg;
$rec3: 11em,19em,240deg;
$rec4: -1em,26em,180deg;
$rec5: -13em,19em,120deg;
$rec6: -13em,5em,60deg;

/* These rectangle positions are for the animation sequence,
when the borders appear to temporarily radiate outward from the hexagon */
$rec_out1: -1em,-4.5em,360deg;
$rec_out2: 13em,3.5em,300deg;
$rec_out3: 13em,20.5em,240deg;
$rec_out4: -1em,28.5em,180deg;
$rec_out5: -15em,20.5em,120deg;
$rec_out6: -15em,3.5em,60deg;

/* Initial positions of each rectangle are set, before animation,
and note that they use IDs not classes, as rectangle is already class */
#rec1 {
    @include rec-style(nth($rec1, 1), nth($rec1, 2), nth($rec1, 3));
}
#rec2 {
    @include rec-style(nth($rec2, 1), nth($rec2, 2), nth($rec2, 3));
}
#rec3 {
    @include rec-style(nth($rec3, 1), nth($rec3, 2), nth($rec3, 3));
}
#rec4 {
    @include rec-style(nth($rec4, 1), nth($rec4, 2), nth($rec4, 3));
}
#rec5 {
    @include rec-style(nth($rec5, 1), nth($rec5, 2), nth($rec5, 3));
}
#rec6 {
    @include rec-style(nth($rec6, 1), nth($rec6, 2), nth($rec6, 3));
}

/* -------------------------------RECTANGLE ANIMATIONS--------------------------------- */

/* Here mixin is used so the animation sequence can be reused for each rectangle */
@mixin rotator($name, $pos1, $pos2, $pos3, $pos4, $pos5, $pos6, 
                    $r1, $r2, $r3, $r4, $r5, $r6, $r7) {

    @keyframes #{$name} { 

        /* 0%, 17%. 34%, 50%, 67%, 84%, 100%, are used, 
        this is done to divide animation into 6 parts */
        0% {
            @include rec-style(nth($pos1, 1), nth($pos1, 2), $r1);
        }
        17% {
            @include rec-style(nth($pos2, 1), nth($pos2, 2), $r2);
        }
        34% {
            @include rec-style(nth($pos3, 1), nth($pos3, 2), $r3);
        }
        50% {
            @include rec-style(nth($pos4, 1), nth($pos4, 2), $r4);
        }
        67% {
            @include rec-style(nth($pos5, 1), nth($pos5, 2), $r5);
        }
        84% {
            @include rec-style(nth($pos6, 1), nth($pos6, 2), $r6);
        }
        100% {
            @include rec-style(nth($pos1, 1), nth($pos1, 2), $r7);
        }
    }
}

/* Below are all the animation for each of the 6 rectangles,
note that the animation switches between rec and rec_out,
this gives each rectangle the appearance of radiating inwards and outwards periodically */

.hexagon:hover > #rec1 {
    @include rotator(rotator1, $rec1, $rec_out2, $rec3, $rec_out4, $rec5, $rec_out6, 
    360deg, 300deg, 240deg, 180deg, 120deg, 60deg, 0deg);
    animation: rotator1 2.4s ease-in-out infinite;
}

.hexagon:hover > #rec2 {
    @include rotator(rotator2, $rec2, $rec_out3, $rec4, $rec_out5, $rec6, $rec_out1,
    300deg, 240deg, 180deg, 120deg, 60deg, 0deg, -60deg);
    animation: rotator2 2.4s ease-in-out infinite;
}

.hexagon:hover > #rec3 {
    @include rotator(rotator3, $rec3, $rec_out4, $rec5, $rec_out6, $rec1, $rec_out2,
    240deg, 180deg, 120deg, 60deg, 0deg, -60deg, -120deg);
    animation: rotator3 2.4s ease-in-out infinite;
}

.hexagon:hover > #rec4 {
    @include rotator(rotator4, $rec4, $rec_out5, $rec6, $rec_out1, $rec2, $rec_out3,
    180deg, 120deg, 60deg, 0deg, -60deg, -120deg, -180deg);
    animation: rotator4 2.4s ease-in-out infinite;
}

.hexagon:hover > #rec5 {
    @include rotator(rotator5, $rec5, $rec_out6, $rec1, $rec_out2, $rec3, $rec_out4,
    120deg, 60deg, 0deg, -60deg, -120deg, -180deg, -240deg);
    animation: rotator5 2.4s ease-in-out infinite;
}

.hexagon:hover > #rec6 {
    @include rotator(rotator6, $rec6, $rec_out1, $rec2, $rec_out3, $rec4, $rec_out5,
    60deg, 0deg, -60deg, -120deg, -180deg, -240deg, -300deg);
    animation: rotator6 2.4s ease-in-out infinite;
}







